2020-01-19 00:07:47.706  INFO 4976 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 4976 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:07:47.717 DEBUG 4976 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:07:47.720  INFO 4976 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:07:47.867  INFO 4976 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\hasaki\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-01-19 00:07:47.869  INFO 4976 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-01-19 00:07:47.870  INFO 4976 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-01-19 00:07:49.411  INFO 4976 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:07:49.511  INFO 4976 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 91ms. Found 5 JPA repository interfaces.
2020-01-19 00:07:49.875  INFO 4976 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:07:52.301  INFO 4976 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:07:52.312  INFO 4976 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:07:52.313  INFO 4976 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:07:52.316  INFO 4976 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:07:52.317  INFO 4976 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:07:52.317  INFO 4976 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:07:52.338  INFO 4976 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:07:52.441  INFO 4976 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:07:52.442  INFO 4976 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4571 ms
2020-01-19 00:07:52.697  INFO 4976 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:07:52.795  INFO 4976 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-01-19 00:07:52.961  INFO 4976 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-01-19 00:07:53.074  INFO 4976 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-01-19 00:07:53.230  INFO 4976 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-01-19 00:07:53.251  INFO 4976 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:07:54.234  INFO 4976 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:07:54.241  INFO 4976 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:07:54.316  INFO 4976 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:07:55.986  WARN 4976 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:07:56.527  INFO 4976 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:07:56.717  INFO 4976 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:07:57.735  INFO 4976 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:07:57.740  INFO 4976 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 10.755 seconds (JVM running for 12.094)
2020-01-19 00:07:57.935  INFO 4976 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:07:57.936  INFO 4976 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:07:57.962  INFO 4976 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 25 ms
2020-01-19 00:08:03.640  INFO 4976 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:08:03.803  INFO 4976 --- [http-nio-8080-exec-2] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:08:03.804  INFO 4976 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:08:03.805  INFO 4976 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:08:05.414  INFO 4976 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:08:05.508  INFO 4976 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:08:05.509  INFO 4976 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:08:05.782  INFO 4976 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:08:05.947  INFO 4976 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:08:05.947  INFO 4976 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:08:24.247  WARN 4976 --- [http-nio-8080-exec-2] o.a.c.util.SessionIdGeneratorBase        : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [248] milliseconds.
2020-01-19 00:08:24.252  INFO 4976 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comment', args=[Comment{id=null, nickname='aaa', email='bbb', content='第一级', avatar='null', createTime=null, blog=Blog{usernullid=41, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentabled=false, published=false, recommend=false, createTime=null, updateTime=null}, replyComments=[], parentComment=Comment{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, blog=null, replyComments=[], parentComment=null}}, org.apache.catalina.session.StandardSessionFacade@308174a0]}
2020-01-19 00:08:24.334  INFO 4976 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:08:24.334  INFO 4976 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:09:04.324  INFO 4976 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:09:04.341  INFO 4976 --- [http-nio-8080-exec-1] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:09:04.342  INFO 4976 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:09:04.343  INFO 4976 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:09:05.084  INFO 4976 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:09:05.091  INFO 4976 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:09:05.091  INFO 4976 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:09:05.298  INFO 4976 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:09:05.316  INFO 4976 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:09:05.316  INFO 4976 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:10:17.459  INFO 224 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 224 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:10:17.463 DEBUG 224 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:10:17.463  INFO 224 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:10:17.605  INFO 224 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\hasaki\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-01-19 00:10:17.606  INFO 224 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-01-19 00:10:17.606  INFO 224 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-01-19 00:10:18.851  INFO 224 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:10:18.947  INFO 224 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 87ms. Found 5 JPA repository interfaces.
2020-01-19 00:10:19.277  INFO 224 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:10:19.764  INFO 224 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:10:19.775  INFO 224 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:10:19.776  INFO 224 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:10:19.779  INFO 224 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:10:19.780  INFO 224 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:10:19.780  INFO 224 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:10:19.784  INFO 224 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:10:19.918  INFO 224 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:10:19.918  INFO 224 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2311 ms
2020-01-19 00:10:20.150  INFO 224 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:10:20.248  INFO 224 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-01-19 00:10:20.412  INFO 224 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-01-19 00:10:20.525  INFO 224 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-01-19 00:10:20.639  INFO 224 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-01-19 00:10:20.657  INFO 224 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:10:21.576  INFO 224 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:10:21.582  INFO 224 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:10:21.648  INFO 224 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:10:22.485  WARN 224 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:10:22.696  INFO 224 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:10:22.789  INFO 224 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:10:23.216  INFO 224 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:10:23.219  INFO 224 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 6.659 seconds (JVM running for 7.901)
2020-01-19 00:11:22.084  INFO 4304 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 4304 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:11:22.088 DEBUG 4304 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:11:22.089  INFO 4304 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:11:22.219  INFO 4304 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\hasaki\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-01-19 00:11:22.220  INFO 4304 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-01-19 00:11:22.221  INFO 4304 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-01-19 00:11:23.119  INFO 4304 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:11:23.236  INFO 4304 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 106ms. Found 5 JPA repository interfaces.
2020-01-19 00:11:23.537  INFO 4304 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:11:23.991  INFO 4304 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:11:24.003  INFO 4304 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:11:24.003  INFO 4304 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:11:24.006  INFO 4304 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:11:24.007  INFO 4304 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:11:24.007  INFO 4304 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:11:24.012  INFO 4304 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:11:24.128  INFO 4304 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:11:24.128  INFO 4304 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1907 ms
2020-01-19 00:11:24.307  INFO 4304 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:11:24.363  INFO 4304 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-01-19 00:11:24.452  INFO 4304 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-01-19 00:11:24.535  INFO 4304 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-01-19 00:11:24.652  INFO 4304 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-01-19 00:11:24.665  INFO 4304 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:11:25.429  INFO 4304 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:11:25.434  INFO 4304 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:11:25.495  INFO 4304 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:11:26.195  WARN 4304 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:11:26.398  INFO 4304 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:11:26.538  INFO 4304 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:11:26.950  INFO 4304 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:11:26.952  INFO 4304 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 5.818 seconds (JVM running for 7.157)
2020-01-19 00:11:57.503  INFO 4304 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:11:57.504  INFO 4304 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:11:57.531  INFO 4304 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 23 ms
2020-01-19 00:11:57.568  INFO 4304 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:11:57.691  INFO 4304 --- [http-nio-8080-exec-1] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:11:57.692  INFO 4304 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:11:57.693  INFO 4304 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:11:58.607  INFO 4304 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:11:58.675  INFO 4304 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:11:58.675  INFO 4304 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:11:58.855  INFO 4304 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:11:59.004  INFO 4304 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:11:59.005  INFO 4304 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:12:13.787  WARN 4304 --- [http-nio-8080-exec-3] o.a.c.util.SessionIdGeneratorBase        : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [265] milliseconds.
2020-01-19 00:12:13.789  INFO 4304 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comment', args=[Comment{id=null, nickname='aaa', email='bbb', content='一级', avatar='null', createTime=null, blog=Blog{usernullid=41, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentabled=false, published=false, recommend=false, createTime=null, updateTime=null}, replyComments=[], parentComment=Comment{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, blog=null, replyComments=[], parentComment=null}}, org.apache.catalina.session.StandardSessionFacade@454987e9]}
2020-01-19 00:12:13.832  INFO 4304 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:12:13.832  INFO 4304 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn redirect:/commentList/41
2020-01-19 00:12:28.070  INFO 4304 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:12:28.087  INFO 4304 --- [http-nio-8080-exec-1] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:12:28.091  INFO 4304 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:12:28.091  INFO 4304 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:12:28.644  INFO 4304 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:12:28.651  INFO 4304 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:12:28.651  INFO 4304 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:12:28.849  INFO 4304 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:12:28.868  INFO 4304 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:12:28.868  INFO 4304 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:18:23.475  INFO 4304 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:18:23.506  INFO 4304 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:18:23.506  INFO 4304 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:18:24.678  INFO 4304 --- [http-nio-8080-exec-3] com.yang.blog.web.admin.BlogController   : 访问list
2020-01-19 00:18:24.887  INFO 4304 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:18:24.897  INFO 4304 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:18:24.897  INFO 4304 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:18:35.797  INFO 4304 --- [http-nio-8080-exec-1] com.yang.blog.web.admin.BlogController   : 查找blogs
2020-01-19 00:18:35.799  INFO 4304 --- [http-nio-8080-exec-3] com.yang.blog.web.admin.BlogController   : 查找blogs
2020-01-19 00:18:38.585  INFO 4304 --- [http-nio-8080-exec-8] com.yang.blog.web.admin.BlogController   : 查找blogs
2020-01-19 00:18:38.586  INFO 4304 --- [http-nio-8080-exec-5] com.yang.blog.web.admin.BlogController   : 查找blogs
2020-01-19 00:18:40.949  INFO 4304 --- [http-nio-8080-exec-2] com.yang.blog.web.admin.BlogController   : 查找blogs
2020-01-19 00:18:40.953  INFO 4304 --- [http-nio-8080-exec-4] com.yang.blog.web.admin.BlogController   : 查找blogs
2020-01-19 00:24:19.785  INFO 15324 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 15324 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:24:19.795 DEBUG 15324 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:24:19.796  INFO 15324 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:24:19.917  INFO 15324 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\hasaki\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-01-19 00:24:19.918  INFO 15324 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-01-19 00:24:19.918  INFO 15324 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-01-19 00:24:20.840  INFO 15324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:24:20.948  INFO 15324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 98ms. Found 5 JPA repository interfaces.
2020-01-19 00:24:21.411  INFO 15324 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:24:21.975  INFO 15324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:24:21.985  INFO 15324 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:24:21.986  INFO 15324 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:24:21.989  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:24:21.989  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:24:21.989  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:24:22.011  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:24:22.114  INFO 15324 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:24:22.114  INFO 15324 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2195 ms
2020-01-19 00:24:22.323  INFO 15324 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:24:22.406  INFO 15324 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-01-19 00:24:22.590  INFO 15324 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-01-19 00:24:22.711  INFO 15324 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-01-19 00:24:22.851  INFO 15324 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-01-19 00:24:22.866  INFO 15324 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:24:23.714  INFO 15324 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:24:23.720  INFO 15324 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:24:23.791  INFO 15324 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:24:24.579  WARN 15324 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:24:24.820  INFO 15324 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:24:24.924  INFO 15324 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:24:25.346  INFO 15324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:24:25.349  INFO 15324 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 6.684 seconds (JVM running for 8.039)
2020-01-19 00:24:30.388  INFO 15324 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:24:30.389  INFO 15324 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:24:30.408  INFO 15324 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 19 ms
2020-01-19 00:24:30.455  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.index', args=[{}, Page request [number: 0, size 20, sort: UNSORTED]]}
2020-01-19 00:24:30.734  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:24:30.734  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn index
2020-01-19 00:24:31.951  INFO 15324 --- [http-nio-8080-exec-10] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:24:32.003  INFO 15324 --- [http-nio-8080-exec-10] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:24:32.003  INFO 15324 --- [http-nio-8080-exec-10] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:24:36.311  INFO 15324 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:24:36.394  INFO 15324 --- [http-nio-8080-exec-6] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:24:36.395  INFO 15324 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:24:36.395  INFO 15324 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:24:36.952  INFO 15324 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:24:36.962  INFO 15324 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:24:36.962  INFO 15324 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:24:37.207  INFO 15324 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:24:37.264  INFO 15324 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:24:37.264  INFO 15324 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:25:02.614  WARN 15324 --- [http-nio-8080-exec-5] o.a.c.util.SessionIdGeneratorBase        : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [238] milliseconds.
2020-01-19 00:25:02.616  INFO 15324 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comment', args=[Comment{id=null, nickname='123', email='132', content='123', avatar='null', createTime=null, blog=Blog{usernullid=41, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentabled=false, published=false, recommend=false, createTime=null, updateTime=null}, replyComments=[], parentComment=Comment{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, blog=null, replyComments=[], parentComment=null}}, org.apache.catalina.session.StandardSessionFacade@7bcc08e3]}
2020-01-19 00:25:02.666  INFO 15324 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:25:02.666  INFO 15324 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn redirect:/commentList/41
2020-01-19 00:26:49.573  INFO 15324 --- [Thread-4] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-01-19 00:26:49.581  INFO 15324 --- [Thread-4] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:26:49.589  INFO 15324 --- [Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-01-19 00:26:49.611  INFO 15324 --- [Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-01-19 00:26:50.105  INFO 15324 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 15324 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:26:50.105 DEBUG 15324 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:26:50.105  INFO 15324 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:26:50.643  INFO 15324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:26:50.704  INFO 15324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 60ms. Found 5 JPA repository interfaces.
2020-01-19 00:26:50.835  INFO 15324 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:26:51.103  WARN 15324 --- [restartedMain] org.apache.tomcat.util.modeler.Registry  : The MBean registry cannot be disabled because it has already been initialised
2020-01-19 00:26:51.130  INFO 15324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:26:51.132  INFO 15324 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:26:51.132  INFO 15324 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:26:51.133  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:26:51.133  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:26:51.134  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:26:51.135  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:26:51.224  INFO 15324 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:26:51.225  INFO 15324 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1117 ms
2020-01-19 00:26:51.538  INFO 15324 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:26:51.559  INFO 15324 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2020-01-19 00:26:51.572  INFO 15324 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2020-01-19 00:26:51.573  INFO 15324 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:26:52.097  INFO 15324 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:26:52.097  INFO 15324 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:26:52.151  INFO 15324 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:26:52.606  WARN 15324 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:26:52.770  INFO 15324 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:26:52.832  INFO 15324 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:26:53.155  INFO 15324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:26:53.156  INFO 15324 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 3.109 seconds (JVM running for 155.846)
2020-01-19 00:26:53.157  INFO 15324 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-01-19 00:26:53.319  INFO 15324 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:26:53.320  INFO 15324 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:26:53.329  INFO 15324 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-01-19 00:26:53.337  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comment', args=[Comment{id=null, nickname='123', email='132', content='aaaaaa', avatar='null', createTime=null, blog=Blog{usernullid=41, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentabled=false, published=false, recommend=false, createTime=null, updateTime=null}, replyComments=[], parentComment=Comment{id=-1, nickname='null', email='null', content='null', avatar='null', createTime=null, blog=null, replyComments=[], parentComment=null}}, org.apache.catalina.session.StandardSessionFacade@73355c96]}
2020-01-19 00:26:53.368  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:26:53.368  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn redirect:/comments/41
2020-01-19 00:26:53.385  INFO 15324 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:26:53.405  INFO 15324 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:26:53.405  INFO 15324 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:27:03.563  INFO 15324 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comment', args=[Comment{id=null, nickname='123', email='132', content='@aaa 二级', avatar='null', createTime=null, blog=Blog{usernullid=41, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentabled=false, published=false, recommend=false, createTime=null, updateTime=null}, replyComments=[], parentComment=Comment{id=45, nickname='null', email='null', content='null', avatar='null', createTime=null, blog=null, replyComments=[], parentComment=null}}, org.apache.catalina.session.StandardSessionFacade@73355c96]}
2020-01-19 00:27:03.584  INFO 15324 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:27:03.584  INFO 15324 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn redirect:/comments/41
2020-01-19 00:27:03.591  INFO 15324 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:27:03.607  INFO 15324 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:27:03.607  INFO 15324 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:27:13.873  INFO 15324 --- [http-nio-8080-exec-10] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comment', args=[Comment{id=null, nickname='123', email='132', content='@321321 三级', avatar='null', createTime=null, blog=Blog{usernullid=41, title='null', content='null', firstPicture='null', flag='null', views=null, appreciation=false, shareStatement=false, commentabled=false, published=false, recommend=false, createTime=null, updateTime=null}, replyComments=[], parentComment=Comment{id=48, nickname='null', email='null', content='null', avatar='null', createTime=null, blog=null, replyComments=[], parentComment=null}}, org.apache.catalina.session.StandardSessionFacade@73355c96]}
2020-01-19 00:27:13.886  INFO 15324 --- [http-nio-8080-exec-10] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:27:13.887  INFO 15324 --- [http-nio-8080-exec-10] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn redirect:/comments/41
2020-01-19 00:27:13.895  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:27:13.915  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:27:13.915  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:30:23.564  INFO 15324 --- [Thread-8] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-01-19 00:30:23.567  INFO 15324 --- [Thread-8] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:30:23.568  INFO 15324 --- [Thread-8] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...
2020-01-19 00:30:23.572  INFO 15324 --- [Thread-8] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.
2020-01-19 00:30:24.082  INFO 15324 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 15324 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:30:24.082 DEBUG 15324 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:30:24.082  INFO 15324 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:30:24.787  INFO 15324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:30:24.883  INFO 15324 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 95ms. Found 5 JPA repository interfaces.
2020-01-19 00:30:25.032  INFO 15324 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:30:25.243  WARN 15324 --- [restartedMain] org.apache.tomcat.util.modeler.Registry  : The MBean registry cannot be disabled because it has already been initialised
2020-01-19 00:30:25.264  INFO 15324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:30:25.265  INFO 15324 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:30:25.265  INFO 15324 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:30:25.266  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:30:25.266  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:30:25.266  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:30:25.267  INFO 15324 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:30:25.300  INFO 15324 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:30:25.301  INFO 15324 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1214 ms
2020-01-19 00:30:25.410  INFO 15324 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:30:25.416  INFO 15324 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
2020-01-19 00:30:25.420  INFO 15324 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
2020-01-19 00:30:25.421  INFO 15324 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:30:25.614  INFO 15324 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:30:25.615  INFO 15324 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:30:25.655  INFO 15324 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:30:26.141  WARN 15324 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:30:26.314  INFO 15324 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:30:26.369  INFO 15324 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:30:26.656  INFO 15324 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:30:26.657  INFO 15324 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 2.638 seconds (JVM running for 369.347)
2020-01-19 00:30:26.659  INFO 15324 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-01-19 00:30:26.761  INFO 15324 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:30:26.762  INFO 15324 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:30:26.771  INFO 15324 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-01-19 00:30:26.774  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:30:26.792  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:30:26.794  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:30:26.794  INFO 15324 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:30:27.471  INFO 15324 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:30:27.482  INFO 15324 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:30:27.482  INFO 15324 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:30:27.696  INFO 15324 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:30:28.019  INFO 15324 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:30:28.035 ERROR 15324 --- [http-nio-8080-exec-5] c.y.b.h.ControllerExceptionHandler       : Request URL+http://localhost:8080/comments/41,Exception {}

org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.StackOverflowError
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:835)
Caused by: java.lang.StackOverflowError: null
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:173)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:538)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:174)
	at com.yang.blog.po.User.toString(User.java:37)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Blog.toString(Blog.java:87)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at com.yang.blog.po.Comment.toString(Comment.java:30)
	at java.base/java.lang.String.valueOf(String.java:3042)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:168)
	at java.base/java.util.AbstractCollection.toString(AbstractCollection.java:473)

2020-01-19 00:30:28.053  WARN 15324 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.StackOverflowError]
2020-01-19 00:31:51.840  INFO 11928 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 11928 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:31:51.850 DEBUG 11928 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:31:51.850  INFO 11928 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:31:52.062  INFO 11928 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\hasaki\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-01-19 00:31:52.064  INFO 11928 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-01-19 00:31:52.065  INFO 11928 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-01-19 00:31:53.143  INFO 11928 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:31:53.255  INFO 11928 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 102ms. Found 5 JPA repository interfaces.
2020-01-19 00:31:53.630  INFO 11928 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:31:56.128  INFO 11928 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:31:56.142  INFO 11928 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:31:56.142  INFO 11928 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:31:56.145  INFO 11928 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:31:56.146  INFO 11928 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:31:56.146  INFO 11928 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:31:56.152  INFO 11928 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:31:56.250  INFO 11928 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:31:56.250  INFO 11928 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4185 ms
2020-01-19 00:31:56.480  INFO 11928 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:31:56.612  INFO 11928 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-01-19 00:31:56.878  INFO 11928 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-01-19 00:31:57.104  INFO 11928 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-01-19 00:31:57.243  INFO 11928 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-01-19 00:31:57.261  INFO 11928 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:31:58.107  INFO 11928 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:31:58.113  INFO 11928 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:31:58.180  INFO 11928 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:31:58.989  WARN 11928 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:31:59.236  INFO 11928 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:31:59.355  INFO 11928 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:31:59.758  INFO 11928 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:31:59.761  INFO 11928 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 9.221 seconds (JVM running for 10.631)
2020-01-19 00:32:11.595  INFO 11928 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:32:11.596  INFO 11928 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:32:11.611  INFO 11928 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2020-01-19 00:32:11.649  INFO 11928 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:32:11.793  INFO 11928 --- [http-nio-8080-exec-1] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:32:11.797  INFO 11928 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:32:11.797  INFO 11928 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:32:12.883  INFO 11928 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:32:12.949  INFO 11928 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:32:12.949  INFO 11928 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:32:13.128  INFO 11928 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:32:13.294  INFO 11928 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:32:13.294  INFO 11928 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:37:29.519  INFO 13392 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 13392 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:37:29.523 DEBUG 13392 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:37:29.524  INFO 13392 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:37:29.574  INFO 13392 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\hasaki\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-01-19 00:37:29.575  INFO 13392 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-01-19 00:37:29.575  INFO 13392 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-01-19 00:37:30.420  INFO 13392 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:37:30.528  INFO 13392 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 98ms. Found 5 JPA repository interfaces.
2020-01-19 00:37:31.085  INFO 13392 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:37:31.689  INFO 13392 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:37:31.700  INFO 13392 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:37:31.701  INFO 13392 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:37:31.703  INFO 13392 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:37:31.704  INFO 13392 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:37:31.704  INFO 13392 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:37:31.707  INFO 13392 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:37:31.828  INFO 13392 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:37:31.829  INFO 13392 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2254 ms
2020-01-19 00:37:32.076  INFO 13392 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:37:32.153  INFO 13392 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-01-19 00:37:32.270  INFO 13392 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-01-19 00:37:32.400  INFO 13392 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-01-19 00:37:32.533  INFO 13392 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-01-19 00:37:32.552  INFO 13392 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:37:33.561  INFO 13392 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:37:33.571  INFO 13392 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:37:33.647  INFO 13392 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:37:34.528  WARN 13392 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:37:34.799  INFO 13392 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:37:34.912  INFO 13392 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:37:35.366  INFO 13392 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:37:35.370  INFO 13392 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 6.523 seconds (JVM running for 10.052)
2020-01-19 00:37:43.154  INFO 13392 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:37:43.156  INFO 13392 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:37:43.171  INFO 13392 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-01-19 00:37:43.232  INFO 13392 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:37:43.382  INFO 13392 --- [http-nio-8080-exec-3] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:37:43.383  INFO 13392 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:37:43.385  INFO 13392 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:37:44.721  INFO 13392 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:37:44.797  INFO 13392 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:37:44.798  INFO 13392 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:37:44.961  INFO 13392 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:39:01.238  INFO 13392 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-01-19 00:39:01.242  INFO 13392 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:39:01.399  INFO 13392 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-01-19 00:39:01.704  INFO 13392 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-01-19 00:43:14.415  INFO 9580 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 9580 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:43:14.419 DEBUG 9580 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:43:14.419  INFO 9580 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:43:14.519  INFO 9580 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\hasaki\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-01-19 00:43:14.519  INFO 9580 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-01-19 00:43:14.521  INFO 9580 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-01-19 00:43:15.540  INFO 9580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:43:15.644  INFO 9580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 96ms. Found 5 JPA repository interfaces.
2020-01-19 00:43:15.943  INFO 9580 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:43:16.442  INFO 9580 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:43:16.453  INFO 9580 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:43:16.453  INFO 9580 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:43:16.456  INFO 9580 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:43:16.456  INFO 9580 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:43:16.457  INFO 9580 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:43:16.461  INFO 9580 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:43:16.562  INFO 9580 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:43:16.563  INFO 9580 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2040 ms
2020-01-19 00:43:16.778  INFO 9580 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:43:16.910  INFO 9580 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-01-19 00:43:17.098  INFO 9580 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-01-19 00:43:17.269  INFO 9580 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-01-19 00:43:17.381  INFO 9580 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-01-19 00:43:17.397  INFO 9580 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:43:18.226  INFO 9580 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:43:18.232  INFO 9580 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:43:18.293  INFO 9580 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:43:19.062  WARN 9580 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:43:19.289  INFO 9580 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:43:19.384  INFO 9580 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:43:19.772  INFO 9580 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:43:19.774  INFO 9580 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 6.335 seconds (JVM running for 7.709)
2020-01-19 00:43:23.457  INFO 9580 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:43:23.459  INFO 9580 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:43:23.474  INFO 9580 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-01-19 00:43:23.508  INFO 9580 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:43:23.750  INFO 9580 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:43:23.751  INFO 9580 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:43:29.506  INFO 9580 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.index', args=[{}, Page request [number: 0, size 20, sort: UNSORTED]]}
2020-01-19 00:43:29.628  INFO 9580 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:43:29.628  INFO 9580 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn index
2020-01-19 00:43:31.248  INFO 9580 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:43:31.285  INFO 9580 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:43:31.286  INFO 9580 --- [http-nio-8080-exec-7] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:43:35.333  INFO 9580 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:43:35.399  INFO 9580 --- [http-nio-8080-exec-8] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:43:35.400  INFO 9580 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:43:35.400  INFO 9580 --- [http-nio-8080-exec-8] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:43:35.836  INFO 9580 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:43:35.842  INFO 9580 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:43:35.842  INFO 9580 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:43:36.051  INFO 9580 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:43:36.089  INFO 9580 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:43:36.089  INFO 9580 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:44:26.145  INFO 9580 --- [Thread-4] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-01-19 00:44:26.147  INFO 9580 --- [Thread-4] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:44:26.152  INFO 9580 --- [Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-01-19 00:44:26.163  INFO 9580 --- [Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-01-19 00:44:26.624  INFO 9580 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 9580 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:44:26.624 DEBUG 9580 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:44:26.624  INFO 9580 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:44:27.070  INFO 9580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:44:27.192  INFO 9580 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 122ms. Found 5 JPA repository interfaces.
2020-01-19 00:44:27.368  INFO 9580 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:44:27.562  WARN 9580 --- [restartedMain] org.apache.tomcat.util.modeler.Registry  : The MBean registry cannot be disabled because it has already been initialised
2020-01-19 00:44:27.595  INFO 9580 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:44:27.596  INFO 9580 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:44:27.596  INFO 9580 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:44:27.597  INFO 9580 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:44:27.597  INFO 9580 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:44:27.597  INFO 9580 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:44:27.598  INFO 9580 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:44:27.636  INFO 9580 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:44:27.637  INFO 9580 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1009 ms
2020-01-19 00:44:27.779  INFO 9580 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:44:27.813  INFO 9580 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2020-01-19 00:44:27.820  INFO 9580 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2020-01-19 00:44:27.820  INFO 9580 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:44:28.105  INFO 9580 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:44:28.106  INFO 9580 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:44:28.181  INFO 9580 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:44:29.245  WARN 9580 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:44:29.412  INFO 9580 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:44:29.465  INFO 9580 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:44:29.770  INFO 9580 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:44:29.771  INFO 9580 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:44:29.772  INFO 9580 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 3.205 seconds (JVM running for 77.706)
2020-01-19 00:44:29.772  INFO 9580 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:44:29.776  INFO 9580 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-01-19 00:44:29.784  INFO 9580 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-01-19 00:44:29.787  INFO 9580 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:44:29.806  INFO 9580 --- [http-nio-8080-exec-1] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:44:29.814  INFO 9580 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:44:29.814  INFO 9580 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:44:30.278  INFO 9580 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='127.0.0.1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:44:30.288  INFO 9580 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:44:30.288  INFO 9580 --- [http-nio-8080-exec-4] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:44:30.597  INFO 9580 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:44:30.665  INFO 9580 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:44:30.665  INFO 9580 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:45:38.741  INFO 10872 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 10872 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:45:38.746 DEBUG 10872 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:45:38.747  INFO 10872 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:45:38.908  INFO 10872 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in C:\Users\hasaki\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.2\jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/C:/Users/hasaki/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-01-19 00:45:38.909  INFO 10872 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-01-19 00:45:38.911  INFO 10872 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-01-19 00:45:40.158  INFO 10872 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:45:40.251  INFO 10872 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 85ms. Found 5 JPA repository interfaces.
2020-01-19 00:45:40.542  INFO 10872 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:45:41.119  INFO 10872 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:45:41.128  INFO 10872 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:45:41.128  INFO 10872 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:45:41.131  INFO 10872 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:45:41.131  INFO 10872 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:45:41.132  INFO 10872 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:45:41.135  INFO 10872 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:45:41.263  INFO 10872 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:45:41.263  INFO 10872 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2351 ms
2020-01-19 00:45:41.458  INFO 10872 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:45:41.517  INFO 10872 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-01-19 00:45:41.613  INFO 10872 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-01-19 00:45:41.699  INFO 10872 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-01-19 00:45:41.813  INFO 10872 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-01-19 00:45:41.827  INFO 10872 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:45:42.630  INFO 10872 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:45:42.636  INFO 10872 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:45:42.711  INFO 10872 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:45:43.484  WARN 10872 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:45:43.783  INFO 10872 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:45:43.938  INFO 10872 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:45:44.400  INFO 10872 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:45:44.403  INFO 10872 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 6.459 seconds (JVM running for 7.819)
2020-01-19 00:45:49.155  INFO 10872 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:45:49.156  INFO 10872 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:45:49.172  INFO 10872 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-01-19 00:45:49.205  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:45:49.320  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:45:49.322  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:45:49.322  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:45:50.636  INFO 10872 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:45:50.723  INFO 10872 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:45:50.724  INFO 10872 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:45:51.482  INFO 10872 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:45:51.770  INFO 10872 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:45:51.771  INFO 10872 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:51:12.997  INFO 10872 --- [Thread-4] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-01-19 00:51:12.999  INFO 10872 --- [Thread-4] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:51:13.007  INFO 10872 --- [Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-01-19 00:51:13.031  INFO 10872 --- [Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-01-19 00:51:13.659  INFO 10872 --- [restartedMain] com.yang.blog.BlogApplication            : Starting BlogApplication on DESKTOP-IHFCB9J with PID 10872 (C:\Users\hasaki\IdeaProjects\blog\target\classes started by hasaki in C:\Users\hasaki\IdeaProjects\blog)
2020-01-19 00:51:13.659 DEBUG 10872 --- [restartedMain] com.yang.blog.BlogApplication            : Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-01-19 00:51:13.659  INFO 10872 --- [restartedMain] com.yang.blog.BlogApplication            : The following profiles are active: dev
2020-01-19 00:51:14.205  INFO 10872 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-01-19 00:51:14.265  INFO 10872 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 59ms. Found 5 JPA repository interfaces.
2020-01-19 00:51:14.362  INFO 10872 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-01-19 00:51:14.517  WARN 10872 --- [restartedMain] org.apache.tomcat.util.modeler.Registry  : The MBean registry cannot be disabled because it has already been initialised
2020-01-19 00:51:14.539  INFO 10872 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-01-19 00:51:14.540  INFO 10872 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-19 00:51:14.540  INFO 10872 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-19 00:51:14.541  INFO 10872 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
2020-01-19 00:51:14.541  INFO 10872 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
2020-01-19 00:51:14.542  INFO 10872 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2020-01-19 00:51:14.543  INFO 10872 --- [restartedMain] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
2020-01-19 00:51:14.573  INFO 10872 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-19 00:51:14.573  INFO 10872 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 909 ms
2020-01-19 00:51:14.809  INFO 10872 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-01-19 00:51:14.823  INFO 10872 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2020-01-19 00:51:14.830  INFO 10872 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2020-01-19 00:51:14.831  INFO 10872 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-01-19 00:51:15.173  INFO 10872 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-01-19 00:51:15.173  INFO 10872 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-01-19 00:51:15.247  INFO 10872 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-01-19 00:51:16.319  WARN 10872 --- [restartedMain] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-01-19 00:51:16.500  INFO 10872 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-19 00:51:16.554  INFO 10872 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-01-19 00:51:16.858  INFO 10872 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-01-19 00:51:16.858  INFO 10872 --- [restartedMain] com.yang.blog.BlogApplication            : Started BlogApplication in 3.267 seconds (JVM running for 340.275)
2020-01-19 00:51:16.861  INFO 10872 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-01-19 00:51:16.917  INFO 10872 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-01-19 00:51:16.917  INFO 10872 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-01-19 00:51:16.928  INFO 10872 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-01-19 00:51:16.931  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/blog/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.IndexController.blog', args=[41, {}]}
2020-01-19 00:51:16.957  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.web.IndexController        : Blog{userUser{id=1, nickname='yangshen', username='yangshen', password='81dc9bdb52d04dc20036dbd8313ed055', email='614989768@qq.com', avatar='https://picsum.photos/id/1011/800/400', type=1, createTime=null, updateTime=null}id=41, title='mysql', content='<h1 id="sql语句">sql语句</h1>
<h2 id="ddl">DDL</h2>
<p>用来定义数据库对象：库、表、列<br />
创建、删除、修改 结构</p>
<ul>
<li>
<p>数据库</p>
<ol>
<li>查看所有数据库：<code>SHOW DATABASES</code></li>
<li>切换（要操作的）数据库：<code>USE 数据库名</code></li>
<li>创建数据库:<code>CREATE DATABASES [IF NOT EXISTS] mydb [CHARSET=utf8]</code></li>
<li>删除数据库：<code>DROP DATABASES [IF EXISTS] mydb</code></li>
<li>修改数据库编码:<code>ALTER DATABASES mydb CHARACTER SET utf8</code></li>
</ol>
</li>
<li>
<p>数据类型</p>
<ul>
<li>文本类
<ol>
<li>CHAR(size)</li>
<li>VARCHAR(size)  大于size255转化为TEXT</li>
<li>TINYTEXT</li>
<li>TEXT 65535个字符</li>
<li>BLOB 65535个字节</li>
<li>MEDIUMTEXT 16 777 215个字符</li>
<li>LONGTEXT 4 294 967 295个字符</li>
<li>ENUM(x,y,z) 只能输入预定好的值65535</li>
<li>SET 与MEUM类似，最多包含64个列表项，可存储一个以上的值</li>
</ol>
</li>
<li>数据类
<ol>
<li>TINYINT(size) -128 to 127      ro 0 to 255</li>
<li>SMALLINT(size) -32768 to 32767</li>
<li>MEDIUMINT(size) -8388608 to 8388607</li>
<li>INT(size)    -2147483648 to 2147483647</li>
<li>BIGINT(size)  -9223372036854775808 to 9223372036854775807</li>
<li>FLOAT(size,d) d规定小数点右侧的最大位数</li>
<li>DOUBLE(size,d)</li>
<li>DECIMAL  字符串存储的DOUBLE类型，允许固定的小数点</li>
</ol>
</li>
<li>时间类
<ol>
<li>DATE()  YYYY-MM-DD</li>
<li>DATETIME()  YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP() YYYY-MM-DD HH:MM:SS使用Unix纪元‘1970-01-01 00:00:00’至今的描述存储</li>
<li>TIME()  HH:MM:SS</li>
<li>YEAR()   1901-2155   70-69</li>
</ol>
</li>
</ul>
</li>
<li>
<p>表</p>
<ol>
<li>
<p>创建表：</p>
<pre><code>CREATE TABLE [IF NOT EXISTS] 表名(
    列名 列类型,
    列名 列类型, 
    列名 列类型,
    列名 列类型
)[ charset = utf8];
</code></pre>
</li>
<li>
<p>查看当前数据库中所有表名称：SHOW TABLES;</p>
</li>
<li>
<p>查看表结构： DESC 表名;</p>
</li>
<li>
<p>删除表 DROP TABLE 表名;</p>
</li>
<li>
<p>修改表 前缀：ALTER TABLE 表名</p>
<ul>
<li>添加：</li>
</ul>
<pre><code>ALTER TABLE 表名 ADD(
    列名 列类型,
...
)
</code></pre>
<ul>
<li>修改列类型</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 MODIFY 列名 列类型
</code></pre>
<ul>
<li>修改列名称</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 CHANGE 原列名 新列名 列类型;
</code></pre>
<ul>
<li>删除列</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 DROP 列名;
</code></pre>
<ul>
<li>修改表名</li>
</ul>
<pre><code class="language-sql">ALTER TABLE 表名 RENAME 新表名
</code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="dml">DML</h2>
<p>数据操作语言<br />
对表的记录进行更新（增删改）</p>
<ul>
<li>
<p>插入数据<br />
<code>INSERT INTO 表名(列名，列名..)VALUES('','',..);</code></p>
</li>
<li>
<p>修改数据
<code>UPDATE 表名 SET 列名=值1，列名=值2，...[WHERE 条件]；</code>不加 where 该列全部修改</p>
</li>
<li>
<p>删除数据
<code>DELETE FROM 表名 [WHERE 条件];</code></p>
</li>
</ul>
<h2 id="dcl">DCL</h2>
<p>对用户的创建，授权</p>
<ul>
<li>创建用户
<code>CREATE USER 用户名@ip地址('%') IDENTIFIED BY '密码';</code></li>
<li>给用户授权
<code>GRANT 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>撤销授权
<code>REVOKE 权限1，权限n ON 数据库.* TO 用户名@ip地址</code></li>
<li>查看权限
<code>SHOW GRANTS FOR 用户名@ip地址</code></li>
<li>删除用户
<code>DROP USER 用户名@ip地址</code></li>
</ul>
<h2 id="dql">DQL</h2>
<ul>
<li>
<p>distinct  去重</p>
<p><code>select distinct col_name from table_name</code></p>
</li>
<li>
<p>order by   默认为asc</p>
<p><code>select * from table_name [where] order by col_name [asc/desc][,col_name [asc/desc]...]</code></p>
</li>
<li>
<p>limit(dialect)</p>
<p><code>select * from table_name [where] [order by col_name] limit[offset,]rowCount</code></p>
</li>
<li>
<p>insert into and select</p>
<p><code>insert into table1 [(col1,col2)]select col3,col4 from table2</code></p>
</li>
<li>
<p>in 语法</p>
<p><code>select * from table_name col_name in (value1,value2)</code>value 可用select col_name获得</p>
</li>
<li>
<p>between      （a&lt;=b&lt;=c）  not between</p>
</li>
<li>
<p>like</p>
<p><code>select * from table_name where col_name [not] like pattern</code></p>
<p>&quot;%&quot;可以匹配任何字符串</p>
</li>
<li>
<p>count</p>
<p><code>select count(*) 自定义列名 from table_name</code> 用于查询该列有多少条值，为Null不计</p>
</li>
<li>
<p>sum</p>
<p><code>select sum(slary) from table_name</code>  例 计算工资（该列值）总和  null为0</p>
</li>
<li>
<p>max、min、avg</p>
</li>
<li>
<p><strong>group by</strong></p>
<p><code>select job,count(*) from emp [where] group by job</code>与之前的聚合函数配合使用，每一份组的聚合值</p>
</li>
<li>
<p><strong>having</strong></p>
<p><code>select job,count(*) from emp [where] group by job having count(*)&gt;=2</code></p>
</li>
</ul>
<h3 id="连接查询">连接查询</h3>
<ul>
<li>
<p>内连接</p>
<p><code>select * from table_1,table_2</code> 笛卡尔积</p>
<p><code>inner join</code> 加条件   <code>nature join</code>自动寻找条件</p>
</li>
<li>
<p>外连接</p>
<p>左外连接  有一主一次，当不满足条件时，左表完全显示，不满足内容为NULL</p>
<pre><code class="language-sql">SELECT e.ename , d.dname
FROM emp e LEFT OUT JOIN dept d
ON e.deptid=d.deptid
</code></pre>
</li>
<li>
<p>右外连接同理左外连接，右表为主</p>
</li>
<li>
<p>全外为full outer join（mysql不支持）可以通过左外加右外加union关键字实现</p>
</li>
</ul>
<h3 id="子查询">子查询</h3>
<p>子查询可以在 <strong>from</strong> 后，也可以在 <strong>where</strong> 后</p>
<ul>
<li>多行单列<code>sal &gt; ALL(查找语句)</code> or<code>sal &gt; ANY (查找语句)</code>  <code>IN</code></li>
<li>单行多列<code>select * from table_1 where (col_1,col_20) IN (select col_1,col_2 from table_2 where 条件)</code></li>
<li>多行多列<code>select * from table_1 别名1,(select ...)别名2 where 条件</code></li>
</ul>
<p>关键字执行顺序（<strong>select、from、where、group by、having、order by</strong>）</p>
<h2 id="数据的备份与恢复">数据的备份与恢复</h2>
<ul>
<li><code>mysqldump -p用户名 -u密码 数据库名&gt;路径</code></li>
<li><code>mysqldump -p用户名 -u密码 数据库名&lt;路径</code></li>
<li><code>在客户端里面 source 路径名</code></li>
</ul>
<h2 id="约束">约束</h2>
<ul>
<li>PRIMARY KEY</li>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>AUTO_INCREMENT</li>
<li><code>CONSTRAINT 约束名fk_从表_主表 FOREIGN KEY(本表被约束属性) CONFERENCES 主表(主表的主键)</code></li>
</ul>
<h4 id="合并结果集">合并结果集</h4>
<pre><code class="language-sql">select a , b from table_1
union all
select c , d from table_2
on 条件
</code></pre>
<p>加上<code>all</code>全部显示，不加的话完全相同的行会消除</p>
', firstPicture='https://picsum.photos/id/1011/800/400', flag='原创', views=0, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=2020-01-18 16:34:11.0, updateTime=2020-01-18 21:37:21.0}
2020-01-19 00:51:16.958  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:51:16.959  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog
2020-01-19 00:51:17.456  INFO 10872 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/footer/newblog', ip='127.0.0.1', classMethod='com.yang.blog.web.IndexController.newblogs', args=[{}]}
2020-01-19 00:51:17.465  INFO 10872 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:51:17.465  INFO 10872 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn _fragments :: newblogList
2020-01-19 00:51:17.728  INFO 10872 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='127.0.0.1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:51:17.781  INFO 10872 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:51:17.782  INFO 10872 --- [http-nio-8080-exec-6] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:51:31.889  WARN 10872 --- [http-nio-8080-exec-1] o.a.c.util.SessionIdGeneratorBase        : Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [269] milliseconds.
2020-01-19 00:51:31.893  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comment', args=[Comment{id=null, nickname='a', email='aa', content='测试一级', avatar='null', createTime=null}, org.apache.catalina.session.StandardSessionFacade@cd84271]}
2020-01-19 00:51:31.961  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:51:31.961  INFO 10872 --- [http-nio-8080-exec-1] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn redirect:/comments/41
2020-01-19 00:51:31.982  INFO 10872 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:51:31.999  INFO 10872 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:51:31.999  INFO 10872 --- [http-nio-8080-exec-2] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:51:40.511  INFO 10872 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comment', args=[Comment{id=null, nickname='a', email='aa', content='ceshi 2ji ', avatar='null', createTime=null}, org.apache.catalina.session.StandardSessionFacade@cd84271]}
2020-01-19 00:51:40.525  INFO 10872 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:51:40.526  INFO 10872 --- [http-nio-8080-exec-3] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn redirect:/comments/41
2020-01-19 00:51:40.532  INFO 10872 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:51:40.553  INFO 10872 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:51:40.553  INFO 10872 --- [http-nio-8080-exec-5] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
2020-01-19 00:51:46.347  INFO 10872 --- [http-nio-8080-exec-10] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comment', args=[Comment{id=null, nickname='a', email='aa', content='3', avatar='null', createTime=null}, org.apache.catalina.session.StandardSessionFacade@cd84271]}
2020-01-19 00:51:46.356  INFO 10872 --- [http-nio-8080-exec-10] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:51:46.356  INFO 10872 --- [http-nio-8080-exec-10] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn redirect:/comments/41
2020-01-19 00:51:46.364  INFO 10872 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : Request: RequestLog{url='http://localhost:8080/comments/41', ip='0:0:0:0:0:0:0:1', classMethod='com.yang.blog.web.CommentController.comments', args=[41, {}]}
2020-01-19 00:51:46.383  INFO 10872 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfter
2020-01-19 00:51:46.383  INFO 10872 --- [http-nio-8080-exec-9] com.yang.blog.aspect.LogAspect           : -------------doAfterReturn blog :: commentList
